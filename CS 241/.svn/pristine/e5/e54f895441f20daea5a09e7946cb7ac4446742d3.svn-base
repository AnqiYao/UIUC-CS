
/*
* Networking Lab
* CS 241 - Spring 2018
*/
/*
#pragma once
#include <stddef.h>
#include <sys/types.h>
#include <errno.h>
#include <unistd.h>
#define LOG(...)                      \
    do {                              \
        fprintf(stderr, __VA_ARGS__); \
        fprintf(stderr, "\n");        \
    } while (0);

typedef enum { GET, PUT, DELETE, LIST, V_UNKNOWN } verb;

size_t read_from_socket(int sock_fd, char* line, size_t num);

size_t write_to_socket(int sock_fd, char* line, size_t num);
*/
#pragma once
#include <arpa/inet.h>
#include <errno.h>
#include <stddef.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>

#define LOG(...)                                                               \
    do {                                                                       \
        fprintf(stderr, __VA_ARGS__);                                          \
        fprintf(stderr, "\n");                                                 \
    } while (0);

typedef enum { GET, PUT, DELETE, LIST, V_UNKNOWN } verb;

ssize_t get_message_size(int socket);

ssize_t write_message_size(size_t size, int socket);

ssize_t read_all_from_socket(int sock_fd, char *buffer, size_t count);

ssize_t write_all_to_socket(int sock_fd, const char *buffer, size_t count);
