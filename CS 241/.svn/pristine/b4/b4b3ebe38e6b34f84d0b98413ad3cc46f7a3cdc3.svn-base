/**
* Text Editor Lab
* CS 241 - Spring 2018
*/

#include "document.h"
#include "editor.h"
#include "format.h"
#include "sstream.h"

#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define CSTRING(x) ((bytestring){(char *)x, -1})
#define DECLARE_BUFFER(name) bytestring name = {NULL, 0};
#define EMPTY_BYTES ((bytestring){NULL, 0})

char *get_filename(int argc, char *argv[]) {
	assert(argc>1);
	return argv[1];
}

sstream *handle_create_stream() {
	sstream* temp = sstream_create(EMPTY_BYTES);
   	return temp;
}
document *handle_create_document(const char *path_to_file) {
    return document_create_from_file(path_to_file);
}

void handle_cleanup(editor *editor) {
	document_destroy((*editor).document);
}

void handle_display_command(editor *editor, size_t start_line,
                            ssize_t max_lines, size_t start_col_index,
                            ssize_t max_cols) {
	if((ssize_t)document_size(editor->document)<=0){
		print_usage_error();
		return;
	}
	if(max_lines == -1){
		for(size_t i = start_line; i <= document_size(editor->document); i++){
			print_line(editor->document, i, start_col_index, max_cols);
		}
	}
	else{
		size_t temp;
		if((size_t)max_lines < document_size(editor->document))	temp = max_lines;
		else temp = document_size(editor->document) - 1;
		for(size_t j = start_line; j <= temp; j++){
			print_line(editor->document, j, start_col_index, max_cols);
		}
	}
}

void handle_insert_command(editor *editor, location loc, const char *line) {
	if(loc.line_no > document_size(editor->document)){
		document_insert_line(editor->document, loc.line_no, line);
		return;	
	}
	char* temp = document_get_line(editor->document,loc.line_no);
	size_t length = strlen(temp) + strlen(line) + 1;
	char* str = malloc(len);
	strncpy(str, temp, loc.idx);
	str[index] = '\0';
	strcat(str, line);
	strcat(str, temp + index);
	document_delete_line(document, loc.line_no);
	document_insert_line(document, loc.line_no, str);
	free(str);
}

void handle_append_command(editor *editor, size_t line_no, const char *line) {
    // TODO implement handle_append_command
	if(line_no > document_size(editor->document))	
		document_insert_line(editor->document, loc.line_no, line);
	else{
		char* old = document_get_line(editor->document, loc.line_no);	
		old += strlen(old);
		while(*line){
			if((*line == '\')&&(line[1] == '\0')){
				line++;
			}
			else if(*line == '\n'){
				*old = '\';
				old++;
				line++;
			}
			else{
			*old = *line;
			old++;
			line++;
			}	
		}
		*old = '\0';	
	}
}

void handle_write_command(editor *editor, size_t line_no, const char *line) {
    // TODO implement handle_write_command
	if(line_no > document_size(editor->document))	
		document_insert_line(editor->document, loc.line_no, line);
	else{
		char* old = document_get_line(editor->document, loc.line_no);	
		while(*line){
			if((*line == '\')&&(line[1] == '\0')){
				line++;
			}
			else if(*line == '\n'){
				*old = '\';
				old++;
				line++;
			}
			else{
			*old = *line;
			old++;
			line++;
			}	
		}
		if(*old) old[0] = '\0'; 	
	}
}

void handle_delete_command(editor *editor, location loc, size_t num_chars) {
    	// TODO implement handle_delete_command
	if(loc.line_no > document_size(editor->document)){
		// ?????Can we get the Angrave's answer here?
		int max = document_size(editor->document);
		num = loc.line_no;
		while(num > max){
			document_delete_line(editor->document, num);
			num--;
		}
		return;
	} 
	char* line = document_get_line(editor->document, loc.line_no);
	if(strlen(line) - idx <= num_chars){
		line[idx] = '\0';
	}else{
		line += idx;
		whlie(line[num_chars]){
			*line = line[num_chars];
			line++;
		} 
		line++ = '\0';
	}
}

void handle_delete_line(editor *editor, size_t line_no) {
	if(line_no <= document_size(editor->document))
		document_delete_line(editor->document, line_no);
}

location handle_search_command(editor *editor, location loc,
                               const char *search_str) {
    // TODO implement handle_search_command
    	if(*search_str == "") return (location){0, 0};
	if(loc.line_no > document_size(editor->document)) return (location){0, 0};
	char * line = document_get_line(editor->document, loc.line_no);
	if(strlen(search_str) > (strlen(line)-loc.idx)) return (location){0, 0};
	line += loc.idx;
	int new_idx = 0;
	int found = 1;
	while(line[new_idx]){
		if(line[new_idx] == search_str[0]){
			int i;
			for(i = 1; i < strlen(search_str);i++){
				if(found!=1)
					break;
				else {
					if(line[new_idx+i] != search_str[i]) 
						found = 0;
				}
			}
			if (found == 1) return (location) {loc.line_no,loc.idx+new_idx}
		}
		found = 1;
		new_idx += 1;				
	}
	return (location){0, 0};
}

void handle_merge_line(editor *editor, size_t line_no) {
    // TODO implement handle_merge_line
	char* old = document_get_line(editor->document, line_no);
	char* line = document_get_line(editor->document, line_no+1);
	document_delete_line(editor->document, line_no+1);
	old += strlen(old);
	while(*line){
		*old = *line;
		old++;
		line++;
	}
	*old = '\0';
}

void handle_split_line(editor *editor, location loc) { 
    // TODO implement handle_split_line
	char* old = document_get_line(editor->document, loc.line_no);
	old = old+loc.idx;
	document_insert_line(editor->document, loc.line_no + 1, old);
	*old = '\0';
	return;	
}

void handle_save_command(editor *editor) {	
	document_write_to_file(editor->document, editor->filename);
}
